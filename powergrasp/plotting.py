"""
Definition of the plotting method.

"""
from powergrasp import commons
from powergrasp import statistics
from powergrasp.statistics import MEASURES

# Logger
LOGGER = commons.logger()

try:
    # plotting libraries
    #  this is just a test for print a warning if there are not present
    import matplotlib
    import pandas
    import numpy
except ImportError:
    LOGGER.warning('plotting libraries are not all there. '
                   'Maybe you will need to install them.')


# Data for plotting
COLORS = ('black', 'green', 'blue', 'red')
LABELS = (
    'time per step',
    'edge compressed',
    'generated poweredge',
    'generated powernode',
)
INDEX = {label: idx for idx, label in enumerate(LABELS)}


# PLOTTING
def plots(filename, title="Compression statistics", xlabel='Iterations',
          ylabel='{Power,} {node,edge}s counters', savefile=None, dpi=400):
    """Generate the plot that show all the data generated by the compression

    if savefile is not None and is a filename, the figure will be saved
    in png in given file, with given dpi."""
    # plotting libraries
    from matplotlib import rc
    rc('text', usetex=True)
    import matplotlib.pyplot as plt
    import numpy as np
    import pandas as pd
    from matplotlib.pyplot import savefig

    # GET DATA
    try:
        data = np.genfromtxt(
            filename,
            delimiter=',',
            skip_header=0,
            skip_footer=0,
            names=True,  # read names from header
        )
    except IOError as e:
        LOGGER.warning('The file '
                       + statistics_filename
                       + ' can\'t be opened. No statistics will be saved.')

    # time could be inexistant, if no timer has been used for compression
    TIME = any(float(time) != 0. for time, _, _, _ in data)
    if not TIME: LOGGER.info("Statistics don't provides times.")


    # Label conversion
    def key2label(key):
        """Convert given string in label printable by matplotlib"""
        return '$\#$' + key.replace('count', '').replace('_', ' ')

    # PLOTTING
    try:
        data_size = len(data[MEASURES[INDEX['time per step']]])
    except TypeError:
        LOGGER.error('Plotting compression statistics require'
                     ' more than one compression iteration')
        LOGGER.error('Plotting aborted')
        return

    # convert in pandas data frame for allow plotting
    gx = pd.DataFrame(data, columns=MEASURES if TIME else MEASURES[1:])
    # {black dotted,red,yellow,blue} line with marker o
    styles = ['ro-', 'yo-', 'bo-']
    if TIME:
        styles = ['ko--'] + styles

    # get plot, and sets the labels for the axis and the right axis (time)
    plot = gx.plot(style=styles, secondary_y=[statistics.GENR_TIME] if TIME else None)
    lines, labels = plot.get_legend_handles_labels()
    rines, _ = plot.right_ax.get_legend_handles_labels() if TIME else ([], None)
    labels = [key2label(l) for l in labels]
    if TIME:
        labels += ['concept generation time']

    plot.legend(lines + rines, labels, loc='best')
    plot.set_xlabel(xlabel)
    plot.set_ylabel(ylabel)
    if TIME:
        plot.right_ax.set_ylabel('Time (s)')

    # axis limits : show the 0
    if TIME:
        plot.right_ax.set_ylim(0, max(gx[statistics.GENR_TIME]) * 2)
    plot.set_ylim(0, max(gx[statistics.COMP_EDGE]) * 1.1)

    # print or save
    if savefile:
        plt.savefig(savefile, dpi=dpi)
        LOGGER.info('Plot of statistics data saved in file '
                    + savefile + ' (' + str(dpi) + ' dpi)')
    else:
        plt.show()
