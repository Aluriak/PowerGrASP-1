# PowerGrASP
This documentation is dedicated to PowerGrASP users who want to know more and contributors,
while the README is sufficient to understand how PowerGrASP works, and how perform a compression.
Moreover, an heavy use of internal docstring have been performed: doc inside the code is the most up-to-date ressource about PowerGrASP functionnalities, behavior and usage.

PowerGrASP is a Python module that allows user to compress a graph, for instance according to the Power Graph method,
and as final output produce a file that contains the compressed graph (see *output* and *visualization* for details).
The compression, performed with the help of Formal Concept Analysis and Logic Programming,
have a visualization interest: the compressed graph is easier to read, even in case of big graphs, and,
in the case of biological data, have some interesting properties for data interpretation.

Some references are given at the end.


## Architecture
PowerGrASP was originally a Power Graph compression implementation.
It is now a library that can performs Power Graph compression, and also any variation of it.

PowerGrASP expose a CLI. Best usage examples are in the Makefile.
The [matplotlib](http://matplotlib.org/) and [pandas](http://pandas.pydata.org/) modules are used for compression statistics plotting (see *plotting*).

The program is basically a Python code that call solvers to compress the input graph,
and perform a traduction of the concepts (biclique, clique, star) in the output format.

PowerGrASP is tested with CPython and Clingo, an Answer Set Programming implementation by [Potassco](http://potassco.org).
All is packaged in a pythonic way for allows the upload on pypi. One of the main dependance is [pyasp](http://github.com/sthiele/pyasp),
the module making the bridge between ASP and Python.


### Modules
The followings modules and subpackages compose the PowerGrASP source code.

- *\__main__*: interface between the command line and the compression procedures.
- *atoms*: provides the AtomsModel class, internal repr of the atoms, plus many functions for manipulating them.
- *cli*: implementation of the command line interface.
- *commons*: global definitions of constants, various generalist functions and logging management.
- *config*: definition of Configuration object, main API object.
- *connected_component*: implementation of the ConnectedComponent class, main API object.
- *converter*: converter library, that allows the transformation of input and output data.
- *graph*: implementation of the Graph class, main API object.
- *info*: informations on the package itself.
- *motif*: subpackage defining the motifs to search during compression.
- *addon*: provides a simple way to extend behavior of concept search.
- *observers*: implementations of various compression observers, with different roles.
- *plotting*: routines for plotting the statistics data.
- *recipes*: subpackage exposing high-level recipes, including Power Graph compression.
- *solving*: provides functions abstracting solving treatment like solver construction and best solution access.
- *statistics*: defines way to do compression statistics, and how print/stock them.
- *test*: unit test subpackage.
- *tests*: repository of biological and non-biological data, used for testing and demonstration on compression.
- *utils*: definition of functions that have been used one time ; not important, but can be useful for generate data.

Moreover, inside the PowerGrASP module is a *ASPSources* subdirectory,
that contains all ASP source code used by PowerGrASP.


# Recipes
## Powergraph
While the more important part of the compression is performed in the ASP side, the compression algorithm can't be detailed
without description of Clingo heuristics and behavior. This is not the goal of this document.
Altough some tips on the implementation will be described below.

### Python side

1. determination of the connected component (ASP solver used (*extraction.lp*)).
2. for each connected component:
    2. search for the best clique (ASP solver used) (ASP solver used (*findbestclique.lp* and *postprocessing.lp*)).
    3. search for the best biclique, that must be better than the clique (ASP solver used (*findbestbiclique.lp* and *postprocessing.lp*)).
    4. if a model is found (either clique or biclique):
        2. save the constructed powernodes and poweredges.
        3. call statistics for take count of advancement.
        4. rebranch to 2.1, with the step number increased by 1.
    5. else: (no interesting model)
        1. break the compression for this connected component.
        2. produce the output format string and write it in output file (ASP solver used (*inclusions.lp*)).
3. print final statistics.

Note that at each iteration, grounding and solving is performed three times.


### Scoring
The score of generated concepts (clique, biclique, star) are equals to the number of edge it covered.
At each step, the best concept, choosen for being produced, is one of the concept with the higher edge cover.

NB: in the *postprocessing.lp* ASP source, the score is inverted for being minimized by the solver.
The main reason is because the solver deals best with minimization than maximization.


### Blocks and alternatives
With blocks, PowerGrASP avoid creation of overlapping power nodes.
A block is a partition of the space, and a node can only be in a single block.
By their nature, blocks and power nodes are really close. Power nodes keep reference to all their contained nodes, while blocks just keep the nodes that are contained directly.
An inclusion tree of blocks is maintained along the compression.
This appears to be very costly, probably because of the maximality constraint that can't be used with blocks:
we can't discard models that are not maximal, because the maximal model is possibly in an overlapping condition
with a previously created power node.

This costly treatment of the data is mainly used and maintained in the *postprocessing.lp* ASP source,
and a significant amount of time have been dedicated to find a best way to avoid overlapping power nodes.

Currently, the best concurrent of blocks is the *concept post-reduction*:
instead of keep all concepts, and scores them after discard those that overlaps,
it is possible to generate only the maximum ones, and reduce them until they overlaps,
and finally score the reduced ones.
This principle, implemented in the branch *enhancement#15*, seems to be slower. (2.4 times the time needed for the *structural binding* test case with blocks)


## Oriented power graph
Add a constraint on the compression: edge(X,Y) is an oriented edge linking X (source) to Y (target).
A poweredge can link only a source set to a target set, where covered edges have their sources in the source set, and their targets in the target set.

This constraint allow a quicker compression but a lower edge compression on tested graphs.
Follows a comparison with the graph [*structural binding*](powergrasp/tests/structural_binding.lp).

    measure     |  regular compression  |  oriented compression
    edge        |         1241          |           1241
    compressed  |          939          |            804
    Â¬compressed |          302          |            437
    edge compr. |          61%          |            48%
    time        |          40s          |            24s


# Implementation details

## Graph model
The graph model consist of an `AtomsModel` instance, i.e. in a set of ASP atoms
describing its properties.

### Modification at each step
After the computation of the best motif, atoms generated by the solver
are used to update the graph model. Follows, for each predicate,
the operation associated that allow the graph to be properly
updated and available for the next concept search.

#### powernode/4 and poweredge/{4,5}
They are useful for the output writer, but not for the remaining compression steps,
so are they not included in the graph model.

#### block/3 and include_block/3
Blocks are not kept between two steps : blocks of the new step replace the previous one.
Same for include_block/3.

#### membercc/1
Since 480fc8fc67b24, some `membercc` are discarded from the graph model at each step.
A node that is implyied in no compressible edge is, by definition,
impossible to include in a concept. It is therefore discarded,
decreasing the amount of nodes that the heuristic can try to place in a concept.

#### Metadata: powernode_count/1 poweredge_count/1 score/1 star/1
These atoms are generated in order to provide to the python code easy detection of particular data.
Score is used to compare concepts, star holds for cases where a powernode contains only one node,
and powernode and poweredge counts provides the number of generated objects.

These atoms are used only at solving and by statistics related observers, and are not kept in the graph model.


## Converters
[Converters](powergrasp/converter/__init__.py) are a set of functions allowing (1) conversion of input data from various formats
to the internal format (for the record, edge/2 ASP atoms),
(2) conversion of generated bubble data to various formats with the help of [bubbletools](http://github.com/aluriak/bubbletools)
and (3) easy and straighforward implementation of other converters.

Both [input](powergrasp/converter/inconverter.py) and [output](powergrasp/converter/outconverter.py) converters
are documented toward their extensions with other convertion methods.


## Motifs and Addons
These two objects are not necessary for basic usage of the module in client code,
but advanced design of search heuristic will probably handle them.

### Motifs: encapsulation of search methods
Motifs are the description of concepts to found in the graph. Consequently they provides two treatments:
how to search them (mainly by providing the associated ASP code source), and how to compress them
(by computing which edges in the graphs are covered by the found concept).

[Basic motifs](powergrasp/motif/basic_motifs.py) are Biclique and Clique. Oriented Biclique is described in its [own submodule](powergrasp/motif/oriented_motifs.py).

### Addons: slight variations made easy
Addons can be plugged to Motifs, in order to modify the behavior of the search.
An addon is basically a set of ASP source code (for instance, [by_priority](powergrasp/ASPsources/by_priority)),
and two functions allowing to enrith the set of atoms to be grounded with the graph data, and to add constants.

Restriction of concepts like *must involve the node of maximal degree in the graph* can easily be described using the Addon system.
This particular example is shown in the [addon module](powergrasp/motif/addon.py).



## Observers
Observers are here to implement a wide range of additional features.
They react on *signals*, that are defined in the [observers package](powergrasp/observers/observers.py),
that allow them to access a particular part of the data.
Some examples follows.

### Output Writer
[This one](powergrasp/observers/output.py) wait for information about compressed motifs in the graph,
and take care of the bubble writing in the output file, and even of its conversion to another file format if user ask to.
It basically reacts to signals *ModelFound* to extract data about found motifs,
*ConnectedComponentStopped* to know when a connected component have been finished (so the bubble file can be written),
and *CompressionStopped* in order to close the file descriptors and operate the conversion at the end of the compression.

### Statistics
[code](powergrasp/statistics.py)

### Counters
[code](powergrasp/observers/counters.py)



## Logging
Logging is fully configurable and primarily designed for debug. Although, higher more of logging like INFO are useful for users who like to watch their computers work.
WARNING and higher modes are good for production environnment, while they don't pollute the stderr unless a serious problem appears.

Note that, whatever is the stdout loglevel given in CLI, all logs will be written to logfiles.



## Optimizations
The following parts are about the various optimizations implemented.


### Score bounds  (since 0.3.X)
The score bounds (inclusives) are computed before any concept search, as follow:
- the initial best score is the number of edges in the graph
- the initial minimal score is 2
- after successful clique search, the minimal score is set to the score of the clique
- if a better score is possible (score of the clique is lower than the maximal score), a biclique is searched
- the score of the best found concept is set as the best score for the next step.

Another part of the score bound is the determination of a minimal lowerbound. This is not interesting,
while the benchmarks shows a slower compression.
The minimal score is 2, or equals to the score of the clique found (if any) at the same step for any biclique search.


### Reduction of equivalent nodes  (currently under test)
Nodes with exactly the same attributes (== linked to the same other nodes) are always handled together in cases of bicliques.
If N nodes have the same attributes, then the smaller lexicographically will be choosen as the normal node. The others are named Â«hiddenÂ» nodes.
The data extraction in *extract.lp* yields an equiv/2 atom, where equiv(X,Y) define Y as an hidden node, and X as a normal node.
In *findbestbiclique.lp* the equiv/2 atoms are used for define the content of each set of the biclique: if X is embed in a set, then all hidden nodes Y such as equiv(X,Y) will be added to the set.
The score can finally be computed.

However, cliques needs a special treatment. When a clique use a node X such as equiv(X,Y) exist, one hidden node Y is choosen and is no longer marked as hidden, as the equiv(X,Y) atom is not yielded by the postprocessing step.
The choosen Y node is put in the clique, and the node X score is decremented.


#### commits
preprocessing: a110480e4b0b3da00fdeb520239cf09b7aeb6c00  
postprocessing: 2faae7614d9eb8b0b9e943f542cb6ebc196a2214  
compression: 3dc32cc80664c4ae0c179b324726312ba2e125ae  
findbestclique: 403d7c7f18ff9724c0f0323b98b4c3fe19594b35  
clique test case: 2a8e21d2fede030fa4e5bf43f23f23ba2d236ee3  
main commit: 209d191f628fca4152893c9dc1aa1677205fa923  


# CLI & API
The CLI usage is described through the help:

    python -m powergrasp --help


The API is defined by the powergrasp module:

    from powergrasp import recipes
    from powergrasp import config
    cfg = config.from_cli(infile='graph.lp', outfile='output.bbl')
    recipes.powergraph(cfg)

Cf *README.mkd* and *Makefile* for exact PowerGrASP command line or python usage example.



# I/O & Visualization
PowerGrASP main goal is data visualization. Follows some ways for perform that.

## Cytoscape
The default output format, named bubble, is notabily readable by [Cytoscape **2**](http://www.cytoscape.org/download_old_versions.html),
once the plugin [CyOog](http://www.biotec.tu-dresden.de/research/schroeder/powergraphs/download-cytoscape-plugin.html) is installed.

This plugin is the result of their work on graph compression, and embeds BIOTEC compression program.
The bubble format describes the compressed graph, is close to the Nested Network Format (NNF), is human readable,
and can be loaded by CyOog for print the compressed graph.

PowerGrASP is only a bubble file generator: it works independantly of Cytoscape,
and use other technics for reach a comparable result with CyOog.
As a consequence, while showing the compressed graph is not PowerGrASP's job,
it lets Cytoscape (and CyOog) perform the final printings.

### Caveats
CyOog does not handles edges that are printed multiple times, nor oriented edges.
Thus, oriented compression is not efficiently reprensented using Cytoscape.

## Oog Command line tool
BIOTEC team also released a [command line tool](http://www.biotec.tu-dresden.de/research/schroeder/powergraphs/download-command-line-tool.html) for power graph analysis.
This tool allow to print a bubble file without Cytoscape usage, with something like:

    java -jar Oog.jar -inputfiles=path/to/bubble.bbl -img -f=png

Add *&>/dev/null* for prevent any logging output.
Some problems can appears, notabily the normal edges that are not displayed.


## DOT file format
Graphviz and its dot format handles hierarchical graph. [bubble-tools](https://github.com/Aluriak/bubble-tools)
is a simple python module that convert bubble files (outputed by PowerGrASP) to other formats, including dot.
PowerGrASP is able to convert its output directly if *bubbletools* is available on the system.

[Graphviz](http://graphviz.org) is a way to visualize dot, or using softwares like [ZGR](http://zvtm.sourceforge.net/zgrviewer.html) or [xdot](http://freecode.com/projects/xdot_py).

Also, [Gephi](http://gephi.org) in versions smaller than 0.9, since it has [removed the hierarchical graph handling](https://github.com/gephi/graphstore/pull/128),
can be used to print GEXF files that bubble-tools is able to generate.


## Statistics about compression
Using the `--stats-file=filename` option, PowerGrASP will generate statistical data about the compression for each step, and store it in CSV format in given *filename*. With the `--plot-stats` flag, or the `--plot-file=plot.png` option, PowerGrASP will look for the data in *filename* and plot it using matplotlib.




## Input formats
The only input format managed by the compression is an ASP code that contains atoms *edge/2*, describing the link between two nodes identified by their labels.
However, PowerGrASP embeds a converter library that works before PowerGrASP
for create a new file from the non-ASP input file.
Formats currently managed by PowerGrASP are described in the internal docstring.




## References
The Power Graph approach for graph compression allows a lossless compression with an emphasis on biological meaning.
In fact, formal concepts used by Power Graph analysis have a sens in biology, especially in the case of proteomes.

All graphs can be compressed through Power Graph, and will be more readable once compressed,
but interactomes, at least, also gain in interpretability.

The main inspiration of PowerGrASP: PowerGraph Analysis:

    LoÃ¯c Royer, Matthias Reimann, Bill Andreopoulos, and Michael Schroeder.
    Unraveling Protein Networks with Power Graph Analysis.
    PLoS Comput Biol, 4(7):e1000108, July 2008.

Usage of the PowerGraph Analysis:

    Loic Royer, Matthias Reimann, A. Francis Stewart, and Michael Schroeder.
    Network Compression as a Quality Measure for Protein Interaction Networks.
    PLoS ONE, 7(6):e35729, June 2012.

    Yun Zhang, Charles A Phillips, Gary L Rogers, Erich J Baker, Elissa J Chesler, and Michael A Langston.
    On finding bicliques in bipartite graphs: a novel algorithm and
    its application to the integration of diverse biological data types.
    BMC Bioinformatics, 15(1):110, 2014.

ASP through Potassco implementation:

    M. Gebser, R. Kaminski, B. Kaufmann, M. Ostrowski, T. Schaub, and M. Schneider.
    Potassco: The Potsdam answer set solving collection.
    AI Communications, 24(2):107â124, 2011.
